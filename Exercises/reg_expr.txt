Exercise on Regular Expressions

Here is a list of eight regular expressions, numbered *(1)* to *(8)*:._[]

(1) "[^"]*"  
(2) \d+\.\d*  
(3) -?[1-9]\d*|[1-9]\d*-  
(4) \d{1,3}([.]\d{1,3}){3}  
(5) [_a-zA-Z][_a-zA-Z0-9]*  
(6) (\(\d?\d( \d\d)*\) )?\d?\d( \d\d)*  
(7) [ a-zA-Z]+ *= *(\d+|"[^"]*")  
(8) [a-fA-F0-9]{2}([- ][a-fA-F0-9]{2})*  


In each of the following eight sections *(A)* to *(H)*, one of the above is
described verbally and with test examples, *GOOD* ones (matching to the above)
and *BAD* ones (not matching the above).

Find the proper associations:

* *Number* (from above lines) vs.

* *Letter* (from pages following)

(A) An integral number with no leading zeroes and an optional
    minus sign, either before or after the number.

    GOOD: 123
          -4
          50-
    BAD:  023
          34 -
          +1

(B) A floating point number with no sign and an optionally empty fractional
    part, but the decimal point always visible.

    GOOD: 3.1415
          3.14
          3.
    BAD:  .34
          3,4

(C) An "IP Number" written in dotted form (though with only incomplete._[]
   checks of the contained parts for the valid range `0`…`255`).

    GOOD: 192.148.144.123
          0.0.0.1
          253.254.255.256
    BAD:  1.2.34
          1..234

(D) An identifier as typically used in programming languages, i.e.
    beginning with an underscore or letter, followed by any number
    of underscores, letters, or digit.

    GOOD: var
          a
          _x12
    BAD:  12x

(I.e. one of the "GOOD" test cases isn't actually a valid IP because one of it's
parts is "out of range" but that shouldn't matter here.)


---
template: plain
header: ### Tcl Regular Expression Challenge (cont.)

(E) A string of any characters, *enclosed* in double quotes, but not
    *containing* double quotes.

    GOOD: "hello, world"
          "what's up"
          ""
    BAD:  'hello, world'
          "how "nice" is this?"

(F) A "*variable* - *value*"-assignment, i.e. an identifier followed by an
    equals sign, followed by either an *"integral value"* with an optional
    leading minus sign, or a *"string"* in double quotes.

    GOOD my_number = 10
         x = 10
         x= 10
         x    =10
         y = "hello"
    BAD: y := "hi!"
         pi = 3.14
         x = u
         7 = 12

---
template: plain
header: ### Tcl Regular Expression Challenge (cont.)

(G) A hexadecimal number, `A`…`F`, only allowed in upper case and written
    grouped in pairs of two, separated either by space or minus signs.

    GOOD: 6A 35 A7 00
          6A-35-A7-00
          6A-35 A7-00
          1A CA FE
    BAD:  1a Ca-fe
          12 -34- 77

(H) A phone number with an optional area code in parentheses to the left,
    digits written in pairs of two, with either one or two digits only in
    the left-most part.

    GOOD: 12 34 56
          1 23 45 67
          (1 23) 45 67 89
    BAD:  0171 54 81 764
          0171 5481 764
          (0171) 5 48 17 64
